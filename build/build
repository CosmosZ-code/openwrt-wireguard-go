#!/bin/sh

SCRIPT_DIR="$(cd $(dirname $0); pwd)"
BASE_DIR="$(dirname $(pwd))"
cd ../..
REPO_ROOT_DIR=$(pwd)

if [ -n "$GOARCH" -o -n "$GOOS" -o -n "$GOARM" ]; then
    echo ":Ignoring build.env files because environment already configured - GOOS=$GOOS GOARCH=$GOARCH (GOARM=$GOARM)"
else
    if [ -f "$BASE_DIR/build.env" ];then
        echo ":Loading environment from $BASE_DIR/build.env..."
        . "$BASE_DIR/build.env"
    elif [ -f "$SCRIPT_DIR/build.env" ];then
        echo ":Loading environment from $SCRIPT_DIR/build.env..."
        . "$SCRIPT_DIR/build.env"
    fi
fi
if [ -n "$GOARCH" -o -n "$GOOS" -o -n "$GOARM" ]; then
    BUILD_INFO=" for OS=$GOOS ARCH=$GOARCH"
    BUILD_NAME="-$GOOS-$GOARCH"
    if [ -n "$GOARM" ]; then
        BUILD_INFO="${BUILD_INFO}v${GOARM}"
        BUILD_NAME="${BUILD_NAME}v${GOARM}"
    fi
fi

gitreset() {
    git fetch
    git reset --hard HEAD
    git merge '@{u}'
}

checkSHA256() {
    local FILE="$1"
    local EXPECTED="$2"
    
    local CALCULATED="$(sha256sum $FILE | cut -d' ' -f1)"

    if [ "$CALCULATED" != "$EXPECTED" ]; then
        echo ":ERROR: Checksum mismatch on $FILE!!"
        echo "   Expecting  $EXPECTED"
        echo "   Calculated $CALCULATED"
        return 1
    else
        return 0
    fi
}

wireguard() {
    echo ":Processing wireguard-go"
    local UNMODIFIED_main="1889250813d3fc9e4538e669b4fe86fd2caa4949094be06033e6a5c0eb6deb29"
    local UNMODIFIED_makefile="f59c6fbbe54c2d194207ef93bdb27ab69a4f67efd26f147f3a0c60268ebaf57c"
    local UNMODIFIED_queueconstants_default="461802f0fac24977a6164ac96b47b59740c506ed124c39a9e434493889384f28"
    
    local MODIFIED_main="2cf3bcb37be0f4e4e58ccc416ba16a6bec61261f12271afa7c9aedceacf51589"
    local MODIFIED_makefile="c04d9998ae41f016319fb49cc7ffe4955c016368b880814980335fce48b961a2"
    local MODIFIED_queueconstants_default="228c3ed2e4851c988d6a0e4837d18d26f32880331beaa723f13d9aa27dd2be51"

    cd ${REPO_ROOT_DIR}
    if [ ! -d wireguard-go ]; then
        git clone https://git.zx2c4.com/wireguard-go
    fi

    cd ${REPO_ROOT_DIR}/wireguard-go
    echo " -> Pulling latest wireguard-go repository.."
    gitreset

    if checkSHA256 main.go $UNMODIFIED_main && checkSHA256 device/queueconstants_default.go $UNMODIFIED_queueconstants_default; then
        echo " -> Removing 'first class kernel support' intercept from main.go..."
        sed -e '/warning()$/d' -i main.go
        git update-index --assume-unchanged main.go
        echo " -> Modifying device/queueconstants_default.go to minimize memory use..." # https://d.sb/2019/07/wireguard-on-openvz-lxc
        sed -e 's/\(MaxSegmentSize *=\).*/\1 1700/' -e 's/\(PreallocatedBuffersPerPool =\).*/\1 1024/' -i device/queueconstants_default.go
        git update-index --assume-unchanged device/queueconstants_default.go
        echo " -> Modifying Makefile..."
        sed -e 's/\(go build -v\)/\1 -ldflags "-s -w"/' -i Makefile
        git update-index --assume-unchanged device/queueconstants_default.go
        if checkSHA256 main.go $MODIFIED_main && checkSHA256 device/queueconstants_default.go $MODIFIED_queueconstants_default && checkSHA256 Makefile $MODIFIED_makefile; then
            echo " -> Building wireguard-go${BUILD_INFO}..."
            make 
            return $?
        else
            return 1
        fi
    else
        return 1
    fi
}

wg() {
    echo ":Processing wg-go"
    cd ${REPO_ROOT_DIR}
    if [ ! -d wg-go ]; then
        git clone https://github.com/seud0nym/wg-go.git
    fi

    cd ${REPO_ROOT_DIR}/wg-go
    if [ -n "$(git diff)" ]; then
        echo ":ERROR: Uncommited changes in wg-go repository"
        return 1
    fi
    echo " -> Building wg-go for${BUILD_INFO}..."
    make
    return $?
}

if wg && wireguard; then
    for source in "$REPO_ROOT_DIR/wireguard-go/wireguard-go" "$REPO_ROOT_DIR/wg-go/wg-go"; do
        target="$BASE_DIR/release/usr/bin/$(basename $source)"
        if ! cmp "$source" "$target" 2>/dev/null; then
            echo ":Updating $target..."
            mv "$source" "$target"
        else
            rm "$source"
        fi
    done
    cd $BASE_DIR
    if ! cmp "$REPO_ROOT_DIR/wg-go/wg" "$BASE_DIR/release/usr/bin/wg" 1>&2 2>/dev/null; then
        echo ":Updating ../release/usr/bin/wg..."
        cp -p "$REPO_ROOT_DIR/wg-go/wg" "$BASE_DIR/release/usr/bin/wg"
    fi

    echo ":Creating release $(basename $BASE_DIR)${BUILD_NAME}.tgz"
    tar -zcf $(basename $BASE_DIR)${BUILD_NAME}.tgz --mode=755 -C "$BASE_DIR/release" $(find "$BASE_DIR/release" -maxdepth 1 -type d ! -name . -printf "%P ")
fi

